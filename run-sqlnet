#!/usr/bin/env python3

from msbase.lab import Step, AbstractLab
import sys
import re

train_step = Step("train", command = ["python2", "train.py", "--ca", "--train_emb"])
test_step  = Step("test",  command = ["python2", "test.py", "--ca", "--train_emb"])

kinds = ["qm", "ex", "agg", "sel", "where"]
names = { kind : "$Acc_{%s}$" % kind for kind in kinds }
dev_names =  { kind : name + " (dev)"  for kind, name in names.items() }
test_names = { kind : name + " (test)" for kind, name in names.items() }

class Lab(AbstractLab):
    def digest_column_names(self):
        return list(dev_names.values()) + list(test_names.values())
    def digest_output(self, name, output):
        stdout, stderr, code = output
        ret = { key : "" for key in self.digest_column_names() }
        try:
            dev_acc_qm = re.compile("Dev acc_qm: (\d+\.\d+)").findall(stdout)[-1]
            dev_acc_ex = re.compile("Dev execution acc: (\d+\.\d+)").findall(stdout)[-1]
            ret[dev_names["qm"]] = dev_acc_qm
            ret[dev_names["ex"]] = dev_acc_ex
        except Exception as e:
            print(e)
        return ret

lab = Lab("sqlnet", steps=[train_step, test_step])

mode = sys.argv[1]

if mode == "run":
    lab.run()
elif mode == "analyze":
    lab.analyze()
